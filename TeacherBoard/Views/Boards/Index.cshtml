@{
    ViewData["Title"] = "Salle de cours";
}

@model BoardModel;


<style>
    .canvas {
        cursor: url('https://img.icons8.com/cute-clipart/32/000000/pencil.png'), auto;
        border: 1px solid #000000;
    }

    #shape {
        width: 100px;
        height: 100px;
        background-color: red;
        cursor: move;
    }
</style>

<div class="text-center">
    <h1 class="display-4">Salle de cours</h1>

    <div>
        <canvas id="canvas" height="1263" width="892" onmouseout="clearMousePositions()"></canvas>
        <select id="color">
            <option value="black">Black</option>
            <option value="red">Red</option>
            <option value="yellow">Yellow</option>
            <option value="green">Green</option>
            <option value="blue">Blue</option>
        </select>
        <div id="output"></div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="~/lib/aspnet-signalr/signalr.min.js"></script>

    <script>
        $(document).ready(function () {
            prepareCanvasToDraw();
        });
    </script>

    <script>
        function prepareCanvasToDraw() {
            var canvas = document.getElementById('canvas');
            var ctx = canvas.getContext('2d');
            var canvasx = $(canvas).offset().left;
            var canvasy = $(canvas).offset().top;
            var last_mousex = last_mousey = 0;
            var mousex = mousey = 0;
            var mousedown = false;
            var pointerdown = false;
            var tooltype = 'draw';

            $(canvas).on('mousedown', function (e) {
                var scrollX = $(window).scrollLeft();
                var scrollY = $(window).scrollTop();
                last_mousex = mousex = parseInt(e.clientX - canvasx + scrollX);
                last_mousey = mousey = parseInt(e.clientY - canvasy + scrollY);
                mousedown = true;
            });

            $(canvas).on('pointerdown', function (e) {
                var scrollX = $(window).scrollLeft();
                var scrollY = $(window).scrollTop();
                last_mousex = mousex = parseInt(e.clientX - canvasx + scrollX);
                last_mousey = mousey = parseInt(e.clientY - canvasy + scrollY);
                pointerdown = true;
            });

            $(canvas).on('mouseup', function (e) {
                mousedown = false;
            });

            $(canvas).on('pointerup', function (e) {
                pointerdown = false;
            });

            var drawCanvas = function (prev_x, prev_y, x, y, clr) {
                ctx.beginPath();
                console.log("X: " + x + " Y: " + y);
                ctx.globalCompositeOperation = 'source-over';
                ctx.strokeStyle = clr
                ctx.lineWidth = 3;
                ctx.moveTo(prev_x, prev_y);
                ctx.lineTo(x, y);
                ctx.lineJoin = ctx.lineCap = 'round';
                ctx.stroke();
            };

            $(canvas).on('mousemove', function (e) {
                var scrollX = $(window).scrollLeft();
                var scrollY = $(window).scrollTop();
                mousex = parseInt(e.clientX - canvasx + scrollX);
                mousey = parseInt(e.clientY - canvasy + scrollY);
                var clr = $('select[id=color]').val()

                if ((last_mousex > 0 && last_mousey > 0) && mousedown) {
                    drawCanvas(mousex, mousey, last_mousex, last_mousey, clr);
                    connection.invoke('draw', @Model.Id, last_mousex, last_mousey, mousex, mousey, clr);
                }
                last_mousex = mousex;
                last_mousey = mousey;

                $('#output').html('current: ' + mousex + ', ' + mousey + '<br/>last: ' + last_mousex + ', ' + last_mousey + '<br/>mousedown: ' + mousedown);
            });

            $(canvas).on('pointermove', function (e) {
                var scrollX = $(window).scrollLeft();
                var scrollY = $(window).scrollTop();
                mousex = parseInt(e.clientX - canvasx + scrollX);
                mousey = parseInt(e.clientY - canvasy + scrollY);
                var clr = $('select[id=color]').val()

                if ((last_mousex > 0 && last_mousey > 0) && pointerdown) {
                    drawCanvas(mousex, mousey, last_mousex, last_mousey, clr);
                    connection.invoke('draw', @Model.Id, last_mousex, last_mousey, mousex, mousey, clr);
                }
                last_mousex = mousex;
                last_mousey = mousey;

                $('#output').html('current: ' + mousex + ', ' + mousey + '<br/>last: ' + last_mousex + ', ' + last_mousey + '<br/>mousedown: ' + mousedown);
            });

            var mouse_down = false;
            var pointer_down = false;
            var connection = new signalR.HubConnectionBuilder()
                .withUrl('/draw')
                .build();

            connection.on('draw', function (boardId, prev_x, prev_y, x, y, clr) {
                console.log("boardId:" + boardId + "X: " + x + " Y: " + y);
                if (boardId == @Model.Id) {
                    drawCanvas(prev_x, prev_y, x, y, clr);
                }
            });
            connection.start();

            clearMousePositions = function () {
                last_mousex = 0;
                last_mousey = 0;
            }
        }
    </script>

    <script type="text/javascript" src="~/lib/pdf.js/pdf.min.js"></script>
    <script type="text/javascript" src="~/lib/pdf.js/pdf.worker.min.js"></script>
    <script type="text/javascript" src="~/lib/pdf.js/pdf_viewer.js"></script>

    <script id="script">

        var url = 'https://file-examples-com.github.io/uploads/2017/10/file-sample_150kB.pdf';

        pdfjsLib.GlobalWorkerOptions.workerSrc =
            '/lib/pdf.js/pdf.worker.js';

        var loadingTask = pdfjsLib.getDocument(url);
        loadingTask.promise.then(function (pdf) {
            pdf.getPage(1).then(function (page) {
                var scale = 1.5;
                var viewport = page.getViewport({ scale: scale, });

                var canvas = document.getElementById('canvas');
                var context = canvas.getContext('2d');
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                console.log("canvas.height")
                console.log(canvas.height)
                console.log("canvas.width")
                console.log(canvas.width)
                var renderContext = {
                    canvasContext: context,
                    viewport: viewport,
                };
                page.render(renderContext);
            });
        });
    </script>
}